Code


import java.io.IOException;
//import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
//import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
//import java.security.spec.X509EncodedKeySpec;
import org.jose4j.jws.AlgorithmIdentifiers;
import org.jose4j.jws.JsonWebSignature;
import org.jose4j.jwt.JwtClaims;
import org.jose4j.lang.JoseException;

import com.nimbusds.jose.JOSEException;
//import com.nimbusds.jose.jwk.RSAKey;

public class Utility2 {

	public static void main(String[] args) throws JOSEException, JoseException, NoSuchAlgorithmException, InvalidKeySpecException {
		RSAPrivateKey privateKey =null;
		//RSAPublicKey publicKey =null;
		byte[] keyBytes=null;
		try {
			keyBytes = Files.readAllBytes(Paths.get("D:\\OpenSSL\\bin\\cert.der"));
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		/*byte[] keyBytesPub =null;
		try {
			keyBytesPub = Files.readAllBytes(Paths.get("D:\\OpenSSL\\bin\\certpub.der"));
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}*/
		
		
		PKCS8EncodedKeySpec spec =
	    	      new PKCS8EncodedKeySpec(keyBytes);
		/*X509EncodedKeySpec spec2 =
			      new X509EncodedKeySpec(keyBytesPub);*/

		KeyFactory kf = KeyFactory.getInstance("RSA");
		privateKey = (RSAPrivateKey) kf.generatePrivate(spec);
		//publicKey = (RSAPublicKey) kf.generatePublic(spec2);
		//RSAKey jwk = new RSAKey.Builder(publicKey).build();
		//System.out.println("jwt for public key M: "+jwk.getModulus()+" E: "+jwk.getPublicExponent());

		//SIT Aud cdde7603-5df7-4d5b-9ed7-d65f43642f4d
		//SIT2 Aud 19f6dd69-b4b5-4b2b-80e6-241469b8430d
		//Prod Aud 5c1094ac-9e2a-4df3-8f6a-8e9f4575fb0d
		
		//SIT Iss https://m1sit.b2clogin.com/5881da38-665a-4cf2-8365-3a0a4cb681ca/v2.0/
		//SIT2 Iss https://m1sit2.b2clogin.com/3ee9f8e6-8f2f-4755-943d-176e53f87630/v2.0/
		//Prod Iss https://login.m1.com.sg/de906ad9-625a-4438-8325-4f7f86c09614/v2.0/
	    JwtClaims claims = new JwtClaims();
	    claims.setIssuer("https://login.m1.com.sg/de906ad9-625a-4438-8325-4f7f86c09614/v2.0/");
	    claims.setAudience("5c1094ac-9e2a-4df3-8f6a-8e9f4575fb0d"); 
	    claims.setExpirationTimeMinutesInTheFuture(600000); 
	    claims.setGeneratedJwtId(); 
	    claims.setIssuedAtToNow();  
	    claims.setNotBeforeMinutesInThePast(2); 
	    claims.setSubject("S6355610F"); 
	    //claims.setClaim("appEmail","ajay@test.com"); 
	    //claims.setClaim("appPhone","33694499");
	    claims.setClaim("fullName","John Doe"); 
	    claims.setClaim("Gender","Male");
	    
	    
	    JsonWebSignature jws = new JsonWebSignature();

	    jws.setPayload(claims.toJson());

	    jws.setKey(privateKey);
	    

	    jws.setKeyIdHeaderValue("12345678");

	    jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);

	    String jwt = jws.getCompactSerialization();
	    System.out.println("JWT: " + jwt);
	    //BigInteger publicKeyModulus = publicKey.getModulus();
        //BigInteger publicKeyExponent  = publicKey.getPublicExponent();
	    //System.out.println("publicKeyModulus: " + publicKeyModulus);
        //System.out.println("publicKeyExponent: " + publicKeyExponent);

	}

}
